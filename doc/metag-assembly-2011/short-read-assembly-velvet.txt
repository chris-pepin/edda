================================
Short Read Assembly with Velvet 
================================

.. Warning:: These documents are not maintained and their instructions may be
	out of date. However the GED Lab does maintain the `khmer protocols
	<http://khmer-protocols.readthedocs.org/>`__ which may cover similar
	topics. See also the `installation instructions for the current version
	of the khmer project <https://khmer.readthedocs.org/en/latest/install.html>`__. 

:Author: Jason Pell, Adina Howe, Titus Brown
:Date: June 7, 2011
:Last Updated: December 11, 2011 (adina)

For this tutorial, we will be using the short read de novo assembler
Velvet to assemble a simulated metagenome.

Getting Started
---------------

Start or log in to an instance on Amazon EC2 and note the number of CPUs (or
threads) available on your instance.

Go to your /mnt directory where there is more free space::

   %% cd /mnt

We're going to assemble a simulated metagenome which has been
published in "Evaluating the Fidelity of De Novo Short Read
Metagenomic Assembly Using Simulated Data".  It is a mixture of
simulated Illumina reads from 112 genomes.  (Pignatelli, 2011, PLoS
One, http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3100316/)
Specifically, we'll be working with a subset partitioned from their
high complexity, high coverage dataset.  We're working with a nice
small dataset that should assemble pretty fast.

Let's copy the dataset to your instance and uncompress it::

   %% mkdir simulated
   %% cd simulated 
   %% cp /data/simulated_subset.fa.gz .
   %% gunzip simulated_subset.fa.gz

Installing Velvet (threaded)
-----------------------------

Next, we need to obtain some different files.  To obtain Velvet,
use curl::

  %% cd /mnt
  %% curl -O http://www.ebi.ac.uk/~zerbino/velvet/velvet_1.1.07.tgz

Uncompress the tarballs and move into the Velvet directory::

  %% tar xvzf velvet_1.1.07.tgz
  %% cd velvet_1.1.07

Once you are in the Velvet directory, run the following to install::

  %% make 'MAXKMERLENGTH=49' 'OPENMP=2'

This command will compile the package. The MAXKMERLENGTH parameter is
created as a tradeoff between memory efficiency and flexibility with
the 'k' parameter. We have it set to be more than enough for our
purposes, but you may need to set MAXKMERLENGTH higher depending on
what k values you want to use. The OPENMP parameters is the number of
threads which velvet will use for assembly.  This should be set
according to your computational resources (i.e. type of EC2 instance);
just look at the number of cores that are available.

We will now "install" Velvet onto your instance::

   %% cp velveth /usr/local/bin
   %% cp velvetg /usr/local/bin

Running Velvet
--------------

Before you use velvet a lot, you should read the manual
(http://www.ebi.ac.uk/~zerbino/velvet/).  You'll notice that velvet
takes a variety of input formats, and generally you'll need to specify
which ones you have.  Also, if you have paired-end reads and
non-paired end reads, you'll need to separate them (there are several
khmer scripts available to help out.) Finally, if you use certain
features of khmer, you may need to rename your sequences -- we'll cover
that later.

Assembling with Velvet is a two-step process and the manual goes through the
specifics.  In summary, here's what you would typically do::

  %% cd /mnt/simulated
  %% velveth sim.33 33 -fasta -short simulated_subset.fa
  %% velvetg sim.33 -exp_cov auto -cov_cutoff 0 -scaffolding no

The sim.33 is the name of the directory which will contain the velvet
output including the final contigs.  The 33 is the value that we are
selecting for the K parameter. This means that we are using 33-mers to
look for overlaps between the reads. This value depends on your
"sensitivity" and "specificity" needs, and we'll discuss this a bit
more at the board.

Evaluating Assemblies
---------------------

Assessing the quality of a de novo assembly where there is no good
reference is still an open problem.  However, there are many
statistics that can be useful in comparing assemblies to one another.
We have a Python script that provides many of these statistics;
it's in khmer.

To obtain statistics on the file you just generated, run::

  %% python /mnt/khmer/sandbox/assemstats3.py 0 sim*/contigs.fa

You should see output that looks like this::

   ** cutoff: 0
   N  sum  max    filename
   48938   5382968 158 sim.33/contigs.fa

This says that there are 48,938 contigs greater than 0 in length; the
summed length of those contigs is 5.4 MB; and the longest contig is
158 in length.

Try changing the number '0' above to '100' in the assemstats3.py command;
what happens?

Other Stuff To Try
------------------

The optimal value for k depends greatly on the dataset.  A lower value
for k has greater sensitivity, but can produce more false overlaps.
However, it is the best option when you don't have high coverage.  On
the other hand, a high value for k may have a more accurate assembly
and longer contigs, but you are likely to miss a lot of potential read
overlaps, which means you need higher coverage to make up for the
difference.

Try varying the value for k by creating a new directory for each value
that you would like to test. With Velvet, you can only choose odd number 
k-mers. Furthermore, you must choose a k that is smaller than the read length, 
which in this case is > 100, so never mind :).

After you have created all of your assemblies, run::

  %% python /mnt/khmer/sandbox/assemstats3.py 0 */contigs.fa

again to see how the assemblies compare to each other.  If you
generate a lot of assemblies, you can copy and paste the output to a
text file and import it into Excel as a space-delimited file.

We have another script for you to try called extract-long-sequences.fa. 
This script acts as a simple filter to get rid of sequences smaller than a 
certain length. For example, if you have a file named contigs.fa and you 
want only contigs of length 200 or greater, you can run::

   %% python /mnt/khmer/sandbox/extract-long-sequences.py 100 contigs.fa > out.fa

Finally, if you have your own dataset, you can try to assemble it on
your EC2 system.  However, you may want to check memory usage with the
top command in order to ensure that you are not using too much memory.
If the Velvet memory usage is over 90%, you may be using virtual
memory, which means the assembly will take much longer than necessary
(and/or simply die... :)
