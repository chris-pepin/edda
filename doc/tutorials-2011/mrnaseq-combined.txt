==================================
A simple mRNAseq analysis pipeline
==================================

.. Warning:: These documents are not maintained and their instructions may be
	out of date. However the GED Lab does maintain the `khmer protocols
	<http://khmer-protocols.readthedocs.org/>`__ which may cover similar
	topics. See also the `installation instructions for the current version
	of the khmer project <https://khmer.readthedocs.org/en/latest/install.html>`__. 

Start up an instance (ami-ea837b83).  If you want to run your own
assembly, you'll need at least 30 GB of RAM, so a high-memory
double-extra large instance.  If not, you only need the basic "large"
instance.

Create a data volume from the data snapshot (snapshot snap-e6148988),
attach it as /dev/sdf.

Log in.

You'll need to install BLAST (see :doc:`running-blast`), bowtie (see
:doc:`bwa_tutorial`) and Velvet/Oases (see :doc:`mrnaseq-assembly`).
You'll also need screed (see :doc:`short-read-assembly-velvet`).

Mount the data disk under /data::

   %% mkdir /data
   %% mount /dev/xvdf /data

We'll want to work with the files in the /data/lamprey-rnaseq directory.
The simplest way to do this is to copy the files over to /mnt::

   %% rsync -av /data/lamprey-rnaseq /mnt

(rsync is an awesome utility that you can use to transfer stuff between
machines, within machines, etc; you can run it multiple times and it will
only transfer things that have changed, or not been transferred.)

This will take a few minutes.

Now, go to /mnt/lamprey-mrnaseq.  The script 'scripts/run-all.sh' will
run everything BUT the assembly; you'll need to edit it (e.g. with nano)
if you want to run the assembly. ::

   %% cd /mnt/lamprey-rnaseq
   %% more scripts/run-all.sh

Now do::

   %% bash scripts/run-all.sh

This will:

 - generate the assembly (either by running oases or copying the transcripts
    file from the 'generated' directory into the current directory.)

 - build a bowtie index for the lamprey transcripts

 - map the various files to the transcriptome

 - count the reads that map to each transcript

 - normalize the read count across all of the samples

 - leave the results in summary.csv.

Adding gene names
=================

I've provided some BLAST files in 'generated'; take a look at
'transcripts-500.x.mouse'.  That's the result of a BLASTX of
all the transcripts against the mouse proteome.

The first thing to do is to take all of the BLAST results and find the
corresponding mouse sequence, taken from the top BLAST hit.  The script
'merge-blast-and-descr.py' does this and saves the results into a
so-called "pickle", which is just an internal database format used by
Python.

Run::

   %% python scripts/merge-blast-and-descr.py  generated/transcripts-500.x.mouse data/mouse.protein.faa

Now the results will be in 'transcripts-500.x.mouse.pickle'.

Next, let's run through the summary.csv file that you produced, above, and
"transfer" the names appropriately.  If a name stays the same, it means there
was no significant BLAST result for that name.  ::

   %% python scripts/reannotate-summary.py summary.csv transcripts-500.x.mouse.pickle summary.new.csv

Now look in summary.new.csv to see the new names!

Addendum -- useful tricks
=========================

Retrieving individual sequences
-------------------------------

Suppose you want a particular transcript sequence -- what can you do?
Well, you can always open the FASTA file in Word, or vi, or some other
editor, and then select the sequence.  This is slow, and error prone,
and really problematic for extremely big files!

Another thing you can do is run the following Python commands::

   import screed
   for record in screed.open('filename'):
      if record.name == 'desired name':
         print record.sequence
         break

...where you replace 'desired name' and 'filename' with the appropriate
information.

This will iterate over the records in the file until it finds the record
you want, and then print out the sequence and exit.  This is a bit slow
but will work and is easy to debug.

Finally, you can use screed to create a full database, which you can
then randomly index.  This is slower than the above if you need to
only retrieve one sequence, because the initial database creation step
is slow; but if you need to retrieve multiple sequences, it's WAY
faster!

At the command line, type ::

  %% python -m screed.fadbm <fasta filename>

to create the database indices from a FASTA file.  (You can use 'fqdbm'
if it's a FASTQ file.)

Then, in Python, do ::

   import screed
   db = screed.ScreedDB('<fasta filename>')
   
and then use ::

   record = db['sequence name']
   print record.sequence

to retrieve the sequence.

BLAST parsing
-------------

You can do a lot of fairly simple things with the blastparser module.
It's not the best blastparser module in the world (I would recommend
looking at BioPython if you want to do this more seriously) but it
seems to work well enough for a few things.  Try the following::

   for record in blastparser.parse_file('blastfile'):
      print record.query_name
      for hit in record.hits:
         print hit.subject_name
         for match in hit:
            print match.query_start, match.query_end
            print match.query_sequence
            print match.subject_start, match.subject_end
            print match.subject_sequence

Neat, eh?
